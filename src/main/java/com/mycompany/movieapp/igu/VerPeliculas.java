/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.movieapp.igu;

import com.mycompany.movieapp.logica.Controlador;
import com.mycompany.movieapp.logica.Movie;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dani2
 */
public class VerPeliculas extends javax.swing.JFrame {

    Controlador control = null;
    
    public VerPeliculas() {
        control = new Controlador();
        initComponents();
        configurarListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePeliculas = new javax.swing.JTable();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        comboFiltros = new javax.swing.JComboBox<>();
        spRangoAnioUno = new javax.swing.JSpinner();
        spRangoAnioDos = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        background.setBackground(new java.awt.Color(34, 103, 173));
        background.setForeground(new java.awt.Color(34, 103, 173));
        background.setPreferredSize(new java.awt.Dimension(1000, 700));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Montserrat Black", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ver Películas");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 360, 60));

        jSeparator9.setForeground(new java.awt.Color(255, 255, 255));
        background.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 930, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tablePeliculas.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tablePeliculas.setForeground(new java.awt.Color(34, 103, 173));
        tablePeliculas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablePeliculas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );

        background.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 780, 510));

        btnModificar.setBackground(new java.awt.Color(255, 255, 255));
        btnModificar.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(34, 103, 173));
        btnModificar.setText("Modificar");
        btnModificar.setBorder(null);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        background.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 180, 140, 40));

        btnEliminar.setBackground(new java.awt.Color(204, 0, 51));
        btnEliminar.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(null);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        background.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 240, 140, 40));

        txtBuscar.setBackground(new java.awt.Color(255, 255, 255));
        txtBuscar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtBuscar.setForeground(new java.awt.Color(47, 126, 206));
        txtBuscar.setToolTipText("");
        txtBuscar.setBorder(null);
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        background.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 250, 30));

        comboFiltros.setBackground(new java.awt.Color(255, 255, 255));
        comboFiltros.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        comboFiltros.setForeground(new java.awt.Color(34, 103, 173));
        comboFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Título", "Director", "Duración", "Género" }));
        comboFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltrosActionPerformed(evt);
            }
        });
        background.add(comboFiltros, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 170, 30));

        spRangoAnioUno.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        spRangoAnioUno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(34, 103, 173)));
        background.add(spRangoAnioUno, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 80, 30));

        spRangoAnioDos.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        spRangoAnioDos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(34, 103, 173)));
        background.add(spRangoAnioDos, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 130, 70, 30));

        jLabel2.setFont(new java.awt.Font("Montserrat", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("-");
        background.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 130, 40, 30));

        jLabel3.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Búsqueda Avanzada");
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 90, 200, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        if(tablePeliculas.getRowCount() > 0){
            //controlar que se haya seleccionado una película
            if(tablePeliculas.getSelectedRow() !=- 1){
                int id = Integer.parseInt(String.valueOf(tablePeliculas.getValueAt(tablePeliculas.getSelectedRow(),0)));
                Modificar pantallaModif = new Modificar(id);
                pantallaModif.setVisible(true);
                pantallaModif.setLocationRelativeTo(null);
                this.dispose();
                } else {
                mostrarMensaje("No seleccionó ninguna película","error","Error");
            }
            
        } else {
            mostrarMensaje("No hay registros para eliminar en la tabla","error","Error");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        //controlar que la tabla no esté vacía
        if(tablePeliculas.getRowCount() > 0){
            //controlar que se haya seleccionado una película
            if(tablePeliculas.getSelectedRow() !=- 1){
                int id = Integer.parseInt(String.valueOf(tablePeliculas.getValueAt(tablePeliculas.getSelectedRow(),0)));
                control.borrarPelicula(id);
                mostrarMensaje("Película eliminada exitosamente","info","Borrar");
                cargarTabla();
                
            } else {
                mostrarMensaje("No seleccionó ninguna película","error","Error");
            }
            
        } else {
            mostrarMensaje("No hay registros para eliminar en la tabla","error","Error");
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed
    
    public void mostrarMensaje(String mensaje, String tipo, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        if(tipo.equals("info")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        } else if(tipo.equals("error")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        cargarTabla();
        spRangoAnioUno.setValue(1895);
        spRangoAnioDos.setValue(java.time.Year.now().getValue());
    }//GEN-LAST:event_formWindowOpened

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
        realizarBusqueda();
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void configurarListeners() {
    txtBuscar.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        @Override
        public void insertUpdate(javax.swing.event.DocumentEvent evt) {
            realizarBusqueda();
        }

        @Override
        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            realizarBusqueda();
        }

        @Override
        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            
        }
    });
    }
    
    private void realizarBusqueda() {
        String filtro = comboFiltros.getSelectedItem().toString();
        String valor = txtBuscar.getText();
        int anioInicio = (int) spRangoAnioUno.getValue();
        int anioFin = (int) spRangoAnioDos.getValue();

        List<Movie> resultadoBusqueda = control.buscarPeliculasFiltradas(filtro, valor, anioInicio, anioFin);

        cargarTablaFiltrada(resultadoBusqueda);
    }


    
    private void comboFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltrosActionPerformed
        // TODO add your handling code here:
        realizarBusqueda();
    }//GEN-LAST:event_comboFiltrosActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> comboFiltros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSpinner spRangoAnioDos;
    private javax.swing.JSpinner spRangoAnioUno;
    private javax.swing.JTable tablePeliculas;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    public void cargarTabla() {
        //Definir el modelo de la tabla
        DefaultTableModel disenioTabla = new DefaultTableModel(){
            @Override
            public boolean isCellEditable (int row,int column){
                return false;
            }
        };
        //Nombres de las columnas
        String titulos[]={"ID","Título","Director","Año","Duración","Género"};
        disenioTabla.setColumnIdentifiers(titulos);
        
        //Carga de los datos desde la bbdd
        List<Movie> listaPeliculas = control.traerPeliculas();
        
        //Recorrer lista y mostrar cada uno de los elementos
        if(listaPeliculas!=null){
            for(Movie pelis : listaPeliculas){
                Object[] objeto = {pelis.getId(),pelis.getTitulo(),pelis.getDirector(),pelis.getAnio(),pelis.getDuracion(),pelis.getGenero()};
                disenioTabla.addRow(objeto);
            }
        }
        
        tablePeliculas.setModel(disenioTabla);
    }
    
    public void cargarTablaFiltrada(List<Movie> listaFiltrada) {
        // Definir el modelo de la tabla
        DefaultTableModel modeloTabla = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
            }
        };

        // Nombres de las columnas
        String titulos[] = {"ID", "Título", "Director", "Año", "Duración", "Género"};
        modeloTabla.setColumnIdentifiers(titulos);

        // Recorrer la lista filtrada y agregar cada película a la tabla
        if (listaFiltrada != null) {
            for (Movie pelicula : listaFiltrada) {
                Object[] objeto = {pelicula.getId(), pelicula.getTitulo(), pelicula.getDirector(),
                               pelicula.getAnio(), pelicula.getDuracion(), pelicula.getGenero()};
            modeloTabla.addRow(objeto);
            }
        }

        // Establecer el modelo de la tabla con los datos filtrados
        tablePeliculas.setModel(modeloTabla);
}

}
